using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RE_Enemy : MonoBehaviour
{
    public GameObject player;
    public GameObject bulletObjA;
    public GameObject bulletObjB;
    public GameObject itemCoin;
    public GameObject itemPower;
    public GameObject itemBoom;

    public RE_ObjectManager objectManager;

    public int health;
    public int enemyScore;

    public string enemyName;

    public float speed;
    public float maxShotDelay;
    public float curShotDelay;

    public Sprite[] sprite;

    SpriteRenderer spriteRenderer;

    void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
    }

    void OnEnable()
    {
        switch(enemyName)
        {
            case "S":
                health = 3;
                break;
            case "M":
                health = 5;
                break;
            case "L":
                health = 10;
                break;
        }
    }

    void Update()
    {   
        Fire();
        Reload();
    }

    void Fire()
    {   
        if(curShotDelay < maxShotDelay) return;

        if(enemyName == "S")
        {
            GameObject bullet = objectManager.MakeObj("EnemyBulletA");
            bullet.transform.position = transform.position;

            Rigidbody2D rigid = bullet.GetComponent<Rigidbody2D>();

            Vector3 dirVec = player.transform.position - transform.position;
            rigid.AddForce(dirVec.normalized * 5, ForceMode2D.Impulse);
        }
        else if(enemyName == "L")
        {
            GameObject bulletL = objectManager.MakeObj("EnemyBulletB");
            bulletL.transform.position = transform.position + Vector3.left * 0.3f;
            GameObject bulletR = objectManager.MakeObj("EnemyBulletB");
            bulletR.transform.position = transform.position + Vector3.right * 0.3f;

            Rigidbody2D rigidL = bulletL.GetComponent<Rigidbody2D>();
            Rigidbody2D rigidR = bulletR.GetComponent<Rigidbody2D>();

            Vector3 dirVecL = player.transform.position - (transform.position + Vector3.left * 0.3f);
            Vector3 dirVecR = player.transform.position - (transform.position + Vector3.right * 0.3f);

            rigidL.AddForce(dirVecL.normalized * 2, ForceMode2D.Impulse);
            rigidR.AddForce(dirVecR.normalized * 2, ForceMode2D.Impulse);
        }

        curShotDelay = 0;
    }

    void Reload()
    {
        curShotDelay += Time.deltaTime;
    }

    public void OnHit(int dmg)
    {
        if(health < 0) return;

        health -= dmg;

        spriteRenderer.sprite = sprite[1];
        Invoke("ReturnSprite", 0.2f);

        if(health < 0)
        {
            Player playerLogic = player.GetComponent<Player>();
            playerLogic.score += enemyScore;

            int ran = Random.Range(0, 11);

            if(ran < 3){
                Debug.Log("NoDrop");
            }
            else if(ran < 5){
                GameObject ItemCoin = objectManager.MakeObj("ItemCoin");
                ItemCoin.transform.position = transform.position;
            }
            else if(ran < 8){
                GameObject ItemPower = objectManager.MakeObj("ItemPower");
                ItemPower.transform.position = transform.position;
            }
            else if(ran < 10){
                GameObject ItemBoom = objectManager.MakeObj("ItemBoom");
                ItemBoom.transform.position = transform.position;
            }

            gameObject.SetActive(false);
        }
    }

    void ReturnSprite()
    {
        spriteRenderer.sprite = sprite[0];
    }

    void OnTriggerEnter2D(Collider2D other)
    {
        if(other.gameObject.tag == "BoarderBullet")
        {
            gameObject.SetActive(false);
            transform.rotation = Quaternion.identity;
        }
        else if(other.gameObject.tag == "PlayerBullet")
        {
            RE_Bullet bullet = other.gameObject.GetComponent<RE_Bullet>();
            Onhit(bullet.dmg);
            other.gameObject.SetActive(false);
        }
    }
}