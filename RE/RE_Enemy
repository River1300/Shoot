using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RE_Enemy : MonoBehaviour
{
    public GameObject player;
    public GameObject bulletObjA;
    public GameObject bulletObjB;
    public GameObject itemCoin;
    public GameObject itemPower;
    public GameObject itemBoom;

    public RE_GameManager gameManager;
    public RE_ObjectManager objectManager;

    public int health;
    public int enemyScore;
    public int patternIndex;
    public int curPatternCount;
    public int[] maxPatternCount;

    public string enemyName;

    public float speed;
    public float maxShotDelay;
    public float curShotDelay;

    public Sprite[] sprite;

    SpriteRenderer spriteRenderer;
    Animator anim;

    void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();

        if(enemyName == "B")
            anim = GetComponent<Animator>();
    }

    void OnEnable()
    {
        switch(enemyName)
        {
            case "S":
                health = 3;
                break;
            case "M":
                health = 5;
                break;
            case "L":
                health = 10;
                break;
            case "B":
                health = 150;
                Invoke("StopMove", 2);
                break;
        }
    }

    void StopMove()
    {
        if(!gameObject.activeSelf) return;

        Rigidbody2D rigid = GetComponent<Rigidbody2D>();
        rigid.velocity = Vector2.zero;

        Invoke("Think", 2);
    }

    void Think()
    {
        if(!gameObject.activeSelf) return;

        patternIndex = (patternIndex == 3) ? 0 : patternIndex + 1;
        curPatternCount = 0;

        switch(patternIndex)
        {
            case 0:
                FireForward();
                break;
            case 1:
                FireShot();
                break;
            case 2:
                FireArc();
                break;
            case 3:
                FireAround();
                break;
        }
    }

    void FireForward()
    {
        GameObject bulletL = objectManager.MakeObj("BossBulletA");
        bulletL.transform.position = transform.position + Vector3.left * 0.3f;
        GameObject bulletLL = objectManager.MakeObj("BossBulletA");
        bulletLL.transform.position = transform.position + Vector3.left * 0.45f;
        GameObject bulletR = objectManager.MakeObj("BossBulletA");
        bulletR.transform.position = transform.position + Vector3.right * 0.3f;
        GameObject bulletRR = objectManager.MakeObj("BossBulletA");
        bulletRR.transform.position = transform.position + Vector3.right * 0.45f;

        Rigidbody2D rigidL = bulletL.GetComponent<Rigidbody2D>();
        Rigidbody2D rigidLL = bulletLL.GetComponent<Rigidbody2D>();
        Rigidbody2D rigidR = bulletR.GetComponent<Rigidbody2D>();
        Rigidbody2D rigidRR = bulletRR.GetComponent<Rigidbody2D>();

        rigidL.AddForce(Vector2.down * 6, ForceMode2D.Impulse);
        rigidLL.AddForce(Vector2.down * 6, ForceMode2D.Impulse);
        rigidR.AddForce(Vector2.down * 6, ForceMode2D.Impulse);
        rigidRR.AddForce(Vector2.down * 6, ForceMode2D.Impulse);

        if(!gameObject.activeSelf) return;

        curPatternCount++;
        if(curPatternCount < maxPatternCount[patternIndex])
            Invoke("FireForward", 2);
        else
            Invoke("Think", 3);
    }
    void FireShot()
    {
        for(int i = 0; i < 5; i++)
        {
            GameObject bullet = objectManager.MakeObj("EnemyBulletB");
            bullet.transform.position = transform.position;

            Rigidbody2D rigid = bullet.GetComponent<Rigidbody2D>();

            Vector2 dirVec = player.transform.position - transform.position;

            Vector2 ranVec = new Vector2(Random.Range(-0.5f, 0.5f), Random.Range(0f, 2f));
            dirVec += ranVec;
            rigid.AddForce(dirVec.normalized * 3, ForceMode2D.Impulse);
        }

        if(!gameObject.activeSelf) return;

        curPatternCount++;
        if(curPatternCount < maxPatternCount[patternIndex])
            Invoke("FireShot", 3.5f);
        else
            Invoke("Think", 3);
    }
    void FireArc()
    {
        GameObject bullet = objectManager.MakeObj("EnemyBulletA");
        bullet.transform.position = transform.position;
        bullet.transform.rotation = Quaternion.identity;

        Rigidbody2D rigid = bullet.GetComponent<Rigidbody2D>();

        Vector2 dirVec = new Vector2(Mathf.Cos(Mathf.PI * 15 * curPatternCount / maxPatternCount[patternIndex]), -1f);
        rigid.AddForce(dirVec.normalized * 5, ForceMode2D.Impulse);

        if(!gameObject.activeSelf) return;

        curPatternCount++;
        if(curPatternCount < maxPatternCount[patternIndex])
            Invoke("FireArc", 0.15f);
        else
            Invoke("Think", 3);
    }
    void FireAround()
    {
        int roundNumA = 30;
        int roundNumB = 40;
        int roundNum = (curPatternCount % 2 == 0) ? roundNumA : roundNumB;

        for(int index = 0; index < roundNum; index++)
        {
            GameObject bullet = objectManager.MakeObj("BossBulletB");
            bullet.transform.position = transform.position;
            bullet.transform.rotation = Quaternion.identity;

            Rigidbody2D rigid = bullet.GetComponent<Rigidbody2D>();
            Vector2 dirVec = new Vector2(Mathf.Cos(Mathf.PI * 2 * index / roundNum), Mathf.Sin(Mathf.PI * 2 * index / roundNum));
            rigid.AddForce(dirVec.normalized * 5, ForceMode2D.Impulse);

            Vector3 rotVec = Vector3.forward * 360 * index / roundNum + Vector3.forward * 90;
            bullet.transform.Rotate(rotVec);
        }

        if(!gameObject.activeSelf) return;

        curPatternCount++;
        if(curPatternCount < maxPatternCount[patternIndex])
            Invoke("FireAround", 0.7f);
        else
            Invoke("Think", 3);
    }

    void Update()
    {   
        if(enemyName == "B")
            return;

        Fire();
        Reload();
    }

    void Fire()
    {   
        if(curShotDelay < maxShotDelay) return;

        if(enemyName == "S")
        {
            GameObject bullet = objectManager.MakeObj("EnemyBulletA");
            bullet.transform.position = transform.position;

            Rigidbody2D rigid = bullet.GetComponent<Rigidbody2D>();

            Vector3 dirVec = player.transform.position - transform.position;
            rigid.AddForce(dirVec.normalized * 5, ForceMode2D.Impulse);
        }
        else if(enemyName == "L")
        {
            GameObject bulletL = objectManager.MakeObj("EnemyBulletB");
            bulletL.transform.position = transform.position + Vector3.left * 0.3f;
            GameObject bulletR = objectManager.MakeObj("EnemyBulletB");
            bulletR.transform.position = transform.position + Vector3.right * 0.3f;

            Rigidbody2D rigidL = bulletL.GetComponent<Rigidbody2D>();
            Rigidbody2D rigidR = bulletR.GetComponent<Rigidbody2D>();

            Vector3 dirVecL = player.transform.position - (transform.position + Vector3.left * 0.3f);
            Vector3 dirVecR = player.transform.position - (transform.position + Vector3.right * 0.3f);

            rigidL.AddForce(dirVecL.normalized * 2, ForceMode2D.Impulse);
            rigidR.AddForce(dirVecR.normalized * 2, ForceMode2D.Impulse);
        }

        curShotDelay = 0;
    }

    void Reload()
    {
        curShotDelay += Time.deltaTime;
    }

    public void OnHit(int dmg)
    {
        if(health < 0) return;

        health -= dmg;

        if(enemyName == "B")
        {
            anim.SetTrigger("OnHit");
        }
        else
        {
            spriteRenderer.sprite = sprite[1];
            Invoke("ReturnSprite", 0.2f);
        }

        if(health < 0)
        {
            Player playerLogic = player.GetComponent<Player>();
            playerLogic.score += enemyScore;

            gameManager.CallExplosion(transform.position, enemyName);

            int ran = (enemyName == "B") ? 0 : Random.Range(0, 11);

            if(ran < 3){
                Debug.Log("NoDrop");
            }
            else if(ran < 5){
                GameObject ItemCoin = objectManager.MakeObj("ItemCoin");
                ItemCoin.transform.position = transform.position;
            }
            else if(ran < 8){
                GameObject ItemPower = objectManager.MakeObj("ItemPower");
                ItemPower.transform.position = transform.position;
            }
            else if(ran < 10){
                GameObject ItemBoom = objectManager.MakeObj("ItemBoom");
                ItemBoom.transform.position = transform.position;
            }

            if(enemyName == "B")
                gameManager.StageEnd();

            gameObject.SetActive(false);
        }
    }

    void ReturnSprite()
    {
        spriteRenderer.sprite = sprite[0];
    }

    void OnTriggerEnter2D(Collider2D other)
    {
        if(other.gameObject.tag == "BoarderBullet" && enemyName != "B")
        {
            gameObject.SetActive(false);
            transform.rotation = Quaternion.identity;
        }
        else if(other.gameObject.tag == "PlayerBullet")
        {
            RE_Bullet bullet = other.gameObject.GetComponent<RE_Bullet>();
            Onhit(bullet.dmg);
            other.gameObject.SetActive(false);
        }
    }
}